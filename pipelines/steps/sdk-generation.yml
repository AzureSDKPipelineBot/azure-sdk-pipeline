parameters:
  - name: sdkGenerationName
    type: string

  - name: sdk
    type: string

  - name: serviceType
    type: string

  - name: resourceProvider
    type: string

  - name: readmeFile
    type: string

  - name: triggerType
    type: string

  - name: specRepoType
    type: string

  - name: specRepoUrl
    type: string

  - name: specRepoBaseBranch
    type: string

  - name: sdkRepoType
    type: string

  - name: sdkRepoUrl
    type: string

  - name: sdkRepoBaseBranch
    type: string

  - name: skippedTask
    type: string

steps:
  - bash: |
      getRepoName SDK_REPO ${{ parameters.sdkRepoUrl }}
    displayName: Get SDK Repo Folder
    name: getSdkRepo
    workingDirectory: ../

  - bash: |
      getRepoName SPEC_REPO ${{ parameters.specRepoUrl }}
    displayName: Get Spec Repo Folder
    name: getSpecRepo
    workingDirectory: ../

  - bash: |
      getTasksToRun
      retVal=$?
      if [ $retVal -ne 0 ]; then
          echo -e "\033[0;31mGet tasks to run failed"
          exit 1
      fi
    displayName: Get Tasks To Run
    name: getTasksToRun
    workingDirectory: $(SDK_REPO)
    env:
      SDK_REPO: $(SDK_REPO)
      SKIPPED_STEPS: ${{ parameters.skippedTask }}

  - bash: |
      npm install -g @microsoft/rush
      npm install -g dw-azure-track2-js-sdk-release-tools

    displayName: rush
    workingDirectory: $(SDK_REPO))

  - bash: |
      runInitTask
    displayName: InitTask
    condition: contains(variables['TasksToRun'], 'init')
    workingDirectory: $(SDK_REPO)
    env:
      SDK_REPO: $(SDK_REPO)
      TASKS_TO_RUN: $(TasksToRun)

  - template: after-task.yml
    parameters:
      sdkGenerationName: ${{ parameters.sdkGenerationName }}
      taskName: init

  - bash: |
      headSha=`git rev-parse HEAD`
      export HEAD_SHA=${headSha}
      runGenerateAndBuildTask
    workingDirectory: $(SDK_REPO)
    condition: contains(variables['TasksToRun'], 'generateAndBuild')
    displayName: GenerateAndBuildTask
    env:
      TASKS_TO_RUN: $(TasksToRun)
      SDK_REPO: $(SDK_REPO)
      SPEC_FOLDER: $(SPEC_REPO)
      RELATED_README_MD_FILE: ${{ parameters.readmeFile }}
      LANGUAGE: ${{ parameters.sdk }}
      RESOURCE_PROVIDER: ${{ parameters.resourceProvider }}
      AZURE_STORAGE_BLOB_SAS_URL: $(AZURE_STORAGE_BLOB_SAS_URL)
      SDK_GENERATION_NAME: ${{ parameters.sdkGenerationName }}
      SERVICE_TYPE: ${{ parameters.serviceType }}
      HEAD_REF: ${{ parameters.sdkRepoBaseBranch }}
      REPO_HTTP_URL: ${{ parameters.sdkRepoUrl }}

  - template: after-task.yml
    parameters:
      sdkGenerationName: ${{ parameters.sdkGenerationName }}
      taskName: generateAndBuild

  - bash: |
      # start mock server
      IFS=';'
      read -a packageArr <<< ${PACKAGE_FOLDERS}
      for i in "${packageArr[@]}"
      do
        export PACKAGE_FOLDER=$i
        echo "Run Mock Test in ${i}"
        runMockTestTask
      done
    displayName: MockTestTask
    condition: contains(variables['TasksToRun'], 'mockTest')
    workingDirectory: $(SDK_REPO)
    env:
      SDK_REPO: $(SDK_REPO)
      PACKAGE_FOLDERS: $(PackageFolders)
      TASKS_TO_RUN: $(TasksToRun)

  - template: after-task.yml
    parameters:
      sdkGenerationName: ${{ parameters.sdkGenerationName }}
      taskName: mockTest

  - bash: |
      IFS=';'
      read -a packageArr <<< ${PACKAGE_FOLDERS}
      for i in "${packageArr[@]}"
      do
        export PACKAGE_FOLDER=$i
        echo "Run Live Test in ${i}"
        runLiveTestTask
      done
    displayName: LiveTestTask
    condition: contains(variables['TasksToRun'], 'liveTest')
    workingDirectory: $(SDK_REPO)
    env:
      SDK_REPO: $(SDK_REPO)
      PACKAGE_FOLDERS: $(PackageFolders)
      TASKS_TO_RUN: $(TasksToRun)

  - template: after-task.yml
    parameters:
      sdkGenerationName: ${{ parameters.sdkGenerationName }}
      taskName: liveTest