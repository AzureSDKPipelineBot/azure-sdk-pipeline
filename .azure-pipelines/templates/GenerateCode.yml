steps:
- bash: |
    #pull swagger repo
    cd $(Pipeline.Workspace)/s
    git clone --branch $(SPEC_REPO_BASE_BRANCH) https://$(PIPELINE_USER):$(PIPELINE_TOKEN)@$(SPEC_REPO_URL)
    ls -l

    # upload to azure-rest-api-specs branch
  displayName: 'pull swagger repo'
- ${{ if eq(variables.CHECK_OUT, 'true') }}:
  - bash: |
      cd $(Pipeline.Workspace)/s/$(SPEC_REPO_NAME)
      spec_existed_in_remote=$(git ls-remote --heads origin $(WORKBRANCH))
      if [[ -z ${spec_existed_in_remote} ]]; then
        git checkout -b $(WORKBRANCH)
      else
        git checkout $(WORKBRANCH)
        # git reset --hard origin/$(SPEC_REPO_BASE_BRANCH)
      fi
      git config credential.helper store ; git config --global user.email "chunyu@microsoft.com";git config --global user.name "$(PIPELINE_USER);"
      git pull origin $(WORKBRANCH)
      cd $(Pipeline.Workspace)/s
    displayName: 'create swagger work branch'
- bash: |
    set -x
    bash ./scripts/bash/$(SDK)/GenerateCode.sh $(ResourceProvider) $(Pipeline.Workspace)/s/azure-rest-api-specs $(Pipeline.Workspace)/s/azure-sdk-for-go>>$(Pipeline.Workspace)/s/$(TASK_KEY).log 2>&1
    if [ "$?" != "0" ]; then
      echo -e "\e[31m[$(date -u)] ERROR: [$(ResourceProvider)]: generate code failed"
      echo "##vso[task.setvariable variable=Task_Result]failure"
      exit 1
    fi
  displayName: 'Generate code'