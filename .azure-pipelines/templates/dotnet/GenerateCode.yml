steps:
- template: ../PrepareSDKCodeEnv.yml
- bash: |
    bash ./scripts/bash/dotnet/installDotnet.sh
  displayName: 'install .net'
- bash: |
    sudo npm install -g autorest@3.2.3
  displayName: 'install autorest'
- bash: |
    set -x
    shortenRP=$(ResourceProvider)
    shortenRP=${shortenRP:10}
    captizeRP=$(shortenRP)
    captizeRP=`echo ${captizeRP} | tr  '[A-Z]' '[a-z]'`
    serviceType=$(SERVICE_TYPE)
    if [ "$serviceType" == "resource-manager" ]; then
      echo 'resource-manager'
      projectFolder=$(Pipeline.Workspace)/s/$(SDK_REPO_NAME)/sdk/$captizeRP/Azure.ResourceManager.$shortenRP
      if [ -d $projectFolder ]; then
        echo "the project folder exists."
      else
        echo 'generate template'
        cd $(Pipeline.Workspace)/s/$(SDK_REPO_NAME)
        dotnet new -i $(Pipeline.Workspace)/s/$(SDK_REPO_NAME)/eng/templates/Azure.ResourceManager.Template
        mkdir -p $(Pipeline.Workspace)/s/$(SDK_REPO_NAME)/sdk/$captizeRP/Azure.ResourceManager.$shortenRP
        cd $(Pipeline.Workspace)/s/$(SDK_REPO_NAME)/sdk/$captizeRP/Azure.ResourceManager.$shortenRP
        dotnet new azuremgmt --provider $(ResourceProvider) --includeCI true --force

        # update the readme url
        sed -i -e "s|require.*md|require: $(README_FILE_GITHUB_URL_WITH_COMMIT)|g" $(Pipeline.Workspace)/s/$(SDK_REPO_NAME)/sdk/$captizeRP/Azure.ResourceManager.$shortenRP/src/autorest.md
        cat $(Pipeline.Workspace)/s/$(SDK_REPO_NAME)/sdk/$captizeRP/Azure.ResourceManager.$shortenRP/src/autorest.md
        echo "end of autorest.md"
      fi
    elif [ "$serviceType" == "data-plan" ]; then
      echo 'data-plan'
    fi
  displayName: 'Generate autorest.md'
- bash: |
    shortenRP=$(ResourceProvider)
    shortenRP=${shortenRP:10}
    captizeRP=$(shortenRP)
    captizeRP=`echo ${captizeRP} | tr  '[A-Z]' '[a-z]'`
    cd $(Pipeline.Workspace)/s/$(SDK_REPO_NAME)/sdk/$captizeRP/Azure.ResourceManager.$shortenRP/src
    dotnet build /t:GenerateCode >>$(Pipeline.Workspace)/s/$(TASK_KEY).log 2>&1
    if [ "$?" != "0" ]; then
      echo -e "\e[31m[$(date -u)] ERROR: [$(ResourceProvider)]: Generate code failed"
      pwd
      ls -l
      # upload error log
      az login --service-principal -u $(SERVICE_PRINCIPE_ID) -p $(SERVICE_PRINCIPE_SECRET) --tenant $(SERVICE_PRINCIPE_TENANT)
      az storage blob upload -c sdk-pipeline -f $(Pipeline.Workspace)/s/$(TASK_KEY).log -n log/$(TARGET)-$(ResourceProvider)-$(Build.BuildId)-$(TASK_KEY).log --subscription $(SERVICE_PRINCIPE_SUBSCRIPTION) --account-name=sdkpipeline
      echo "##vso[task.setvariable variable=Task_Result]failure"
      ls -l
      exit 1
    else
      cd $(Pipeline.Workspace)/s/$(SDK_REPO_NAME)
      echo "https://$(PIPELINE_USER):$(PIPELINE_TOKEN)@github.com" > ~/.git-credentials
      git config credential.helper store ; git config --global user.email "sdkautomationpipeline@outlook.com";git config --global user.name "AzureSDKPipelineBot"
      git branch; git pull origin $(WORKBRANCH); git add -A; git commit -m "autogenerated"; git push origin $(WORKBRANCH)
    fi
  displayName: 'Generate Code'