steps:
- template: ../PrepareSDKCodeEnv.yml
- bash: |
    bash ./scripts/bash/dotnet/installDotnet.sh 1>$(TASK_KEY).log 2>&1
  displayName: 'install .net'
- bash: |
    serviceType=$(SERVICE_TYPE)
    if [ "$serviceType" == "resource-manager" ]; then
      echo 'resource-manager'
      projectFolder=$(Pipeline.Workspace)/s/$(SDK_REPO_NAME)/sdk/$(ResourceProvider)/Azure.ResourceManager.$(ResourceProvider)
      if [ -f "$projectFolder" ]; then
        echo "$projectFolder exists."
        cp "$SchemaFILE" $(Pipeline.Workspace)/s/azure-rest-api-specs/specification/$(ResourceProvider)/resource-manager/schema.json
      else
        echo 'generate template'
        cd $(Pipeline.Workspace)/s/$(SDK_REPO_NAME)
        dotnet new -i $(Pipeline.Workspace)/s/$(SDK_REPO_NAME)/eng/templates/Azure.ResourceManager.Template
        mkdir -p $(Pipeline.Workspace)/s/$(SDK_REPO_NAME)/sdk/$(ResourceProvider)/Azure.ResourceManager.$(ResourceProvider)
        cd $(Pipeline.Workspace)/s/$(SDK_REPO_NAME)/sdk/$(ResourceProvider)/Azure.ResourceManager.$(ResourceProvider)
        dotnet new azuremgmt --provider $(ResourceProvider) --includeCI true --force

        # update the readme url
        sed "s/require:.*/require:/$(README_FILE_GITHUB_URL_WITH_COMMIT)g" $(Pipeline.Workspace)/s/$(SDK_REPO_NAME)/sdk/$(ResourceProvider)/Azure.ResourceManager.$(ResourceProvider)/src/autorest.md
      fi
    elif [ "$serviceType" == "data-plan" ]; then
      echo 'data-plan'
    fi
  displayName: 'Generate autorest.md'
- bash: |
    cd $(Pipeline.Workspace)/s/$(SDK_REPO_NAME)/sdk/$(ResourceProvider)/Azure.ResourceManager.$(ResourceProvider)/src
    dotnet build /t:GenerateCode 1>>$(TASK_KEY).log 2>&1
    if [ "$?" != "0" ]; then
      echo -e "\e[31m[$(date -u)] ERROR: [$(ResourceProvider)]: Generate code failed"
      # upload error log
      az login --service-principal -u $(SERVICE_PRINCIPE_ID) -p $(SERVICE_PRINCIPE_SECRET) --tenant $(SERVICE_PRINCIPE_TENANT)
      az storage blob upload -c depthcoverage -f $(TASK_KEY).log -n log/$(TARGET)-$(ResourceProvider)-$(Build.BuildId)-$(TASK_KEY).log --subscription $(SERVICE_PRINCIPE_SUBSCRIPTION) --account-name=depthcoverage
      echo "##vso[task.setvariable variable=Task_Result]failure"
      exit 1
    else
      cd $codefolder
      echo "https://$(PIPELINE_USER):$(PIPELINE_TOKEN)@github.com" > ~/.git-credentials
      git config credential.helper store ; git config --global user.email "chunyu@microsoft.com";git config --global user.name "chunyu3"
      git branch; git pull origin $(WORKBRANCH); git add -A; git commit -m "autogenerated"; git push origin $(WORKBRANCH)
    fi
  displayName: 'Generate Code'