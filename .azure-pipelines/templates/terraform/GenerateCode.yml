steps:
- template: ../PrepareSDKCodeEnv.yml
- bash: |
    echo "$README_FILE"
    pwd
    ls -l
    SchemaFILE=$(Pipeline.Workspace)/s/specification/$(ResourceProvider)/resource-manager/schema.json
    if [ -f "$SchemaFILE" ]; then
      echo "$SchemaFILE exists."
      cp "$SchemaFILE" $(Pipeline.Workspace)/s/azure-rest-api-specs/specification/$(ResourceProvider)/resource-manager/schema.json
    fi
    # sudo npm install -g metadata-tool@3.0.5
    sudo npm install -g metadata-tool
    FILE=$(Pipeline.Workspace)/s/specification/$(ResourceProvider)/resource-manager/readme.terraform.md
    if [ -f "$FILE" ]; then
      echo "$FILE exists."
      cp "$FILE" $(Pipeline.Workspace)/s/azure-rest-api-specs/specification/$(ResourceProvider)/resource-manager/readme.terraform.md
    fi
    metadata-tool ./azure-rest-api-specs/$(README_FILE)
    ls -l
    # SchemaFILE=$(Pipeline.Workspace)/s/specification/$(ResourceProvider)/resource-manager/schema.json
    # if [ -f "$SchemaFILE" ]; then
    #   echo "$SchemaFILE exists."
    #   cp "$SchemaFILE" $(Pipeline.Workspace)/s/azure-rest-api-specs/specification/$(ResourceProvider)/resource-manager/schema.json
    # fi
    
    if [ "$?" != "0" ]; then
      echo "failed to generate readme config file"
    else
      echo "readme config file generated"
      cd ./azure-rest-api-specs
      echo "https://$(PIPELINE_USER):$(PIPELINE_TOKEN)@github.com" > ~/.git-credentials
      git config credential.helper store ; git config --global user.email "sdkautomationpipeline@outlook.com";git config --global user.name "AzureSDKPipelineBot;"
      git branch; git pull origin $(WORKBRANCH); git add -A; git commit -m "autogenerated"; git push origin $(WORKBRANCH)
    fi
  displayName: 'Generate or update configuration file'
- bash: |
    mkdir -p $(Pipeline.Workspace)/sdk/sdkvariables
    
    # PACKAGE_NAME=`cat $(Pipeline.Workspace)/s/azure-rest-api-specs/specification/$(ResourceProvider)/resource-manager/readme.terraform.md | grep "cli-name"| awk -F':' '{print $2}' | tr -d '[[:space:]]'`
    PACKAGE_NAME=`cat $(Pipeline.Workspace)/s/azure-rest-api-specs/specification/$(ResourceProvider)/resource-manager/readme.terraform.md | grep "terraform-output-folder" | sed 's/output-folder: \$(terraform-output-folder)\///g'`
    af="$PACKAGE_NAME"
    echo "PACKAGE_NAME:$PACKAGE_NAME"
    echo "##vso[task.setvariable variable=Package]$PACKAGE_NAME"
    echo "$PACKAGE_NAME" > $(Pipeline.Workspace)/sdk/sdkvariables/Package

    echo "##vso[task.setvariable variable=Artifact]$af"
    echo "$af" > $(Pipeline.Workspace)/sdk/sdkvariables/Artifact
    
  displayName: 'set sdk variable'
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Pipeline.Workspace)/sdk'
    artifact: 'sdkvariables'
    publishLocation: 'pipeline'
- bash: |
    # sudo npm install -g oav@2.2.6 --unsafe-perm=true --allow-root
    # sudo npm install -g depthcoverage --unsafe-perm=true --allow-root
    # depthcoverage --token=$(PIPELINE_TOKEN) --org=$(PIPELINE_ORG) --repo=$(PIPELINE_REPO) --operation=read --PRNumber=$(System.PullRequest.PullRequestNumber)

    # for i in $(jq -c .jsonFilelist[] $(RESOURCE_MAP_FILE) | sed -e 's/^"//' -e 's/"$//'); do oav generate-examples $(Pipeline.Workspace)/s/azure-rest-api-specs$i;done
    # # oav generate-examples [PATH]

    # # submit Generated example
    # if [ "$?" != "0" ]; then
    #   echo "failed to generate examples"
    # else
    #   echo "examples generated"
    #   cd $(Pipeline.Workspace)/s/azure-rest-api-specs
    #   echo "https://$(PIPELINE_USER):$(PIPELINE_TOKEN)@github.com" > ~/.git-credentials
    #   git config credential.helper store ; git config --global user.email "sdkautomationpipeline@outlook.com";git config --global user.name "AzureSDKPipelineBot;"
    #   git branch; git pull origin $(WORKBRANCH); git add -A; git commit -m "autogenerated"; git push origin $(WORKBRANCH);
    # fi
  displayName: 'Generate Example'
- bash: |
    pwd
    codefolder="";
    echo "start generate tf code"
    codefolder="$(Pipeline.Workspace)/s/terraform-provider-azurerm"
    cd $(Pipeline.Workspace)/s
    pwd
    mkdir generated
    ls -l $(Pipeline.Workspace)/s/azure-rest-api-specs/specification/$(ResourceProvider)/resource-manager
    echo "TAG:$(TAG)"
    echo "resources:$(RESOURCES)"
    tag=$(TAG)
    resources=$(RESOURCES)
    schemafilepath=""
    if [ -f "$(Pipeline.Workspace)/s/azure-rest-api-specs/specification/$(ResourceProvider)/resource-manager/schema.json" ]; then
      schemafilepath="$(Pipeline.Workspace)/s/azure-rest-api-specs/specification/$(ResourceProvider)/resource-manager/schema.json"
    fi
    set -- autorest --version=3.0.6369 --terraform --use=https://terraformcodegen.blob.core.windows.net/terraformcodegen/autorest-terraform-preview.tgz
    if [ "$tag" != "" ]; then
      set -- "$@" --tag=$(TAG)
    fi

    if [ "$schemafilepath" != "" ]; then
      set -- "$@" --schema-file-path="$schemafilepath"
    fi

    if [ "$resources" != "" ]; then
      set -- "$@" --resources=$(RESOURCES)
    fi

    set -- "$@" --generate-extra-acctest=true --terraform-output-folder=$(Pipeline.Workspace)/s ./azure-rest-api-specs/$(README_FILE)

    "$@" 1>$(Pipeline.Workspace)/s/$(TASK_KEY).log 2>&1

    # ls -l $(Pipeline.Workspace)/s/generated

    if [ "$?" != "0" ]; then
      echo -e "\e[31m[$(date -u)] ERROR: [$(ResourceProvider)]: Generate code failed"
      # upload error log
      az login --service-principal -u $(SERVICE_PRINCIPE_ID) -p $(SERVICE_PRINCIPE_SECRET) --tenant $(SERVICE_PRINCIPE_TENANT)
      az storage blob upload -c sdk-pipeline -f $(Pipeline.Workspace)/s/$(TASK_KEY).log -n log/$(CodeGenerationName)-$(Build.BuildId)-$(TASK_KEY).log --subscription e0f413ab-64d5-48c2-859b-af46b7e8d80b --account-name=sdkpipeline
      echo "##vso[task.setvariable variable=Task_Result]failure"
      exit 1
    else
      echo -e "\e[31m[$(date -u)] INFO: [$(ResourceProvider)]: Generate code"
      cd $codefolder
      pwd
      echo "https://$(PIPELINE_USER):$(PIPELINE_TOKEN)@github.com" > ~/.git-credentials
      git config credential.helper store ; git config --global user.email "sdkautomationpipeline@outlook.com";git config --global user.name "AzureSDKPipelineBot"
      git branch; git pull origin $(WORKBRANCH); git add -A; git commit -m "autogenerated"; git push origin $(WORKBRANCH);
    fi

    ls -l $(Pipeline.Workspace)/s
  displayName: 'Generate code'