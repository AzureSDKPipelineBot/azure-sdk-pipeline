steps:
# - script: |
#     echo 'setup go env'
#     echo "$(ResourceProvider)"
#     mkdir go
#     dir=$pwd
#     export GOPATH=$dir/go
#     echo $GOPATH
#   displayName: "setup Go environment"
- task: GoTool@0
  inputs:
    version: '1.16.x'
    goPath: '/home/vsts/work/1/s/go'
    goBin: '/home/vsts/work/1/s/go/bin'
- script: |
    git clone --branch $(Swagger_BRANCH) https://$(PIPELINE_USER):$(PIPELINE_TOKEN)@github.com/$(Swagger_ORG)/azure-rest-api-specs.git
    mkdir -p ./go/src/github.com/terraform-providers
    cd ./go/src/github.com/terraform-providers
    git clone --branch $(WORKBRANCH) https://$(PIPELINE_USER):$(PIPELINE_TOKEN)@github.com/$(TF_ORG)/terraform-provider-azurerm.git
    echo "https://$(PIPELINE_USER):$(PIPELINE_TOKEN)@github.com" > ~/.git-credentials
    cd terraform-provider-azurerm
    export GOPATH=/home/vsts/work/1/s/go
    echo $GOPATH
    GO111MODULE=off go get github.com/shopspring/decimal
    make tools
    git config credential.helper store ; git config --global user.email "sdkautomationpipeline@outlook.com";git config --global user.name "AzureSDKPipelineBot"

  displayName: "pull repo"
  condition: eq(variables['TARGET'], 'terraform')
- script: |
    sudo npm install -g autorest && sudo npm install -g typescript
  displayName: "install autorest"
- script: |
    pwd
    # autorest --go --use="@microsoft.azure/autorest.go@2.1.175" --verbose --multiapi --use-onever --version=previous --go-sdk-folder=./go/src/github.com/terraform-providers/terraform-provider-azurerm/vendor/github.com/Azure/azure-sdk-for-go ./azure-rest-api-specs/$(README_FILE) 1>>$(Pipeline.Workspace)/s/$(TASK_KEY).log 2>&1
    tag=$(TAG)
    if [ "$tag" == "" ]; then
      autorest --go --use="@microsoft.azure/autorest.go@2.1.175" --verbose --multiapi --use-onever --version=previous --go-sdk-folder=./go/src/github.com/terraform-providers/terraform-provider-azurerm/vendor/github.com/Azure/azure-sdk-for-go ./azure-rest-api-specs/$(README_FILE) 1>>$(Pipeline.Workspace)/s/$(TASK_KEY).log 2>&1
    else
      autorest --go --use="@microsoft.azure/autorest.go@2.1.175" --verbose --use-onever --version=previous --tag=$(TAG) --go-sdk-folder=./go/src/github.com/terraform-providers/terraform-provider-azurerm/vendor/github.com/Azure/azure-sdk-for-go ./azure-rest-api-specs/$(README_FILE) 1>>$(Pipeline.Workspace)/s/$(TASK_KEY).log 2>&1
    fi
    if [ "$?" != "0" ]; then
      echo -e "\e[31m[$(date -u)] ERROR: [$OPERATION : $(ResourceProvider)]: Generate go sdk failed"
      exit 1
    fi
  displayName: "build go-sdk"
  condition: eq(variables['TARGET'], 'terraform')
- bash: |
    pwd
    ls -l
    ls -l ./generated
    sed -i -e 's/\r$//' ./scripts/bash/linter-scripts/*.sh
    cp ./scripts/bash/linter-scripts/*.sh ./go/src/github.com/terraform-providers/terraform-provider-azurerm/scripts/

    DIR=./go/src/github.com/terraform-providers/terraform-provider-azurerm/azurerm/internal/services/$(Package)

    if [ -d "$DIR" ]; then
      rm -rf ./go/src/github.com/terraform-providers/terraform-provider-azurerm/azurerm/internal/services/$(Package)
    else
      echo "$DIR not exists."
    fi

    cp -r ./generated/$(Package) ./go/src/github.com/terraform-providers/terraform-provider-azurerm/azurerm/internal/services/
    ls -l ./go/src/github.com/terraform-providers/terraform-provider-azurerm/azurerm/internal/services/$(Package)

    cd ./go/src/github.com/terraform-providers/terraform-provider-azurerm
    echo -e "\e[32m[$(date -u)] LOG:]: Change client.go and service.go."
    # copy mocked client.go and services.go for single compile
    cp $(Pipeline.Workspace)/s/scripts/TFSingleCompile/client.go azurerm/internal/clients/client.go
    cp $(Pipeline.Workspace)/s/scripts/TFSingleCompile/services.go azurerm/internal/provider/services.go

    CLIENT_IMPORT=`cat azurerm/internal/services/$(Package)/terraform-configuration/configuration_client | sed -n 1p`
    CLIENT_STRUCT=`cat azurerm/internal/services/$(Package)/terraform-configuration/configuration_client | sed -n 2p`
    CLIENT_NEW=`cat azurerm/internal/services/$(Package)/terraform-configuration/configuration_client | sed -n 3p`
    CLIENT_IMPORT_ORI="resource \"github.com\/terraform-providers\/terraform-provider-azurerm\/azurerm\/internal\/services\/resource\/client\""
    CLIENT_STRUCT_ORI="*resource.Client"
    CLIENT_NEW_ORI="client.Resource = resource.NewClient(o)"

    SERVICE_IMPORT=`cat azurerm/internal/services/$(Package)/terraform-configuration/configuration_services | sed -n 1p`
    SERVICE_REGISTRATION=`cat azurerm/internal/services/$(Package)/terraform-configuration/configuration_services | sed -n 2p`
    SERVICE_IMPORT_ORI="\"github.com\/terraform-providers\/terraform-provider-azurerm\/azurerm\/internal\/services\/web\""
    SERVICE_REGISTRATION_ORI="placeholder"

    cat azurerm/internal/clients/client.go | grep -q "/$(Package)/"|echo $?
    if cat azurerm/internal/clients/client.go | grep -q "/$(Package)/"; then
      cat azurerm/internal/clients/client.go | grep "/$(Package)/"
      PACKAGE_NAME_ORI=`cat azurerm/internal/clients/client.go | grep "/$(Package)/" | awk '{print $1}'`
      sed -i "s|^.*${PACKAGE_NAME_ORI} \"github.*$|${CLIENT_IMPORT}|" azurerm/internal/clients/client.go
      sed -i "s/^.*\*${PACKAGE_NAME_ORI}\.Client.*$/${CLIENT_STRUCT}/" azurerm/internal/clients/client.go
      sed -i "s/^.*${PACKAGE_NAME_ORI}\.NewClient(o).*$/${CLIENT_NEW}/" azurerm/internal/clients/client.go
    else
      sed -i "/$CLIENT_IMPORT_ORI/a $CLIENT_IMPORT" azurerm/internal/clients/client.go
      sed -i "/$CLIENT_STRUCT_ORI/a $CLIENT_STRUCT" azurerm/internal/clients/client.go
      sed -i "/$CLIENT_NEW_ORI/a $CLIENT_NEW" azurerm/internal/clients/client.go
      sed -i "/$SERVICE_IMPORT_ORI/a $SERVICE_IMPORT" azurerm/internal/provider/services.go
        sed -i "s/$SERVICE_REGISTRATION_ORI/$SERVICE_REGISTRATION/g" azurerm/internal/provider/services.go
    fi


    echo -e "\e[32m[$(date -u)] LOG:]: Change client.go and service.go successfully."
    cat azurerm/internal/provider/services.go
  displayName: "config client.go and service.go"
  condition: eq(variables['TARGET'], 'terraform')
- bash: |
    export GOPATH=/home/vsts/work/1/s/go
    export PATH=$PATH:$GOPATH/bin
    pwd
    # delete generated terraform configuration
    rm -r ./go/src/github.com/terraform-providers/terraform-provider-azurerm/azurerm/internal/services/$(Package)/terraform-configuration
    # move doc

    ls -l /home/vsts/work/1/s/go/src/github.com/terraform-providers/terraform-provider-azurerm/azurerm/internal/services/$(Package)/website/docs/d/
    mv $(Pipeline.Workspace)/s/go/src/github.com/terraform-providers/terraform-provider-azurerm/azurerm/internal/services/$(Package)/website/docs/d/* $(Pipeline.Workspace)/s/go/src/github.com/terraform-providers/terraform-provider-azurerm/website/docs/d/
    mv $(Pipeline.Workspace)/s/go/src/github.com/terraform-providers/terraform-provider-azurerm/azurerm/internal/services/$(Package)/website/docs/r/* $(Pipeline.Workspace)/s/go/src/github.com/terraform-providers/terraform-provider-azurerm/website/docs/d/

    echo -e "\e[32m[$(date -u)] LOG: [$(ResourceProvider)]: Format Test and Document"
    # fmt tests
    cd ./go/src/github.com/terraform-providers/terraform-provider-azurerm
    find $(Pipeline.Workspace)/s/go/src/github.com/terraform-providers/terraform-provider-azurerm/azurerm/internal/services/$(Package) | sort | while read f; do terrafmt fmt -f $f; done

    # fmt document
    find $(Pipeline.Workspace)/s/go/src/github.com/terraform-providers/terraform-provider-azurerm/website/docs/d/ | egrep "html.markdown" | sort | while read f; do terrafmt fmt -f $f; done
    find $(Pipeline.Workspace)/s/go/src/github.com/terraform-providers/terraform-provider-azurerm/website/docs/r/ | egrep "html.markdown" | sort | while read f; do terrafmt fmt -f $f; done

    # submit code to sdk repo
    echo "https://$(PIPELINE_USER):$(PIPELINE_TOKEN)@github.com" > ~/.git-credentials
    git config credential.helper store ; git config --global user.email "sdkautomationpipeline@outlook.com";git config --global user.name "AzureSDKPipelineBot"
    git branch; git pull origin $(WORKBRANCH); git add -A; git commit -m "autogenerated"; git push origin $(WORKBRANCH);
  displayName: "pre-build"
  condition: eq(variables['TARGET'], 'terraform')
- bash: |
    echo -e "\e[32m[$(date -u)] LOG: [$(ResourceProvider)]: Compile Generated code"
    # export env
    export GOPATH=/home/vsts/work/1/s/go
    export PATH=$PATH:$GOPATH/bin
    # export RP=$(ResourceProvider)
    export RP=$(Package)
    bash ./scripts/bash/compile.sh 1>$(Pipeline.Workspace)/s/$(TASK_KEY).log 2>&1

    if [ "$?" != "0" ]; then
      echo -e "\e[31m[$(date -u)] ERROR: [$(ResourceProvider)]: Compile Generated code failed"
      # upload error log
      az login --service-principal -u $(SERVICE_PRINCIPE_ID) -p $(SERVICE_PRINCIPE_SECRET) --tenant $(SERVICE_PRINCIPE_TENANT)
      az storage blob upload -c $(STORAGE_ACCOUNT_CONTAINER) -f build.log -n log/$(TARGET)-$(ResourceProvider)-$(Build.BuildId)-build.log --subscription $(SERVICE_PRINCIPE_SUBSCRIPTION) --account-name=$(STORAGE_ACCOUNT)
      echo "##vso[task.setvariable variable=Task_Result]failure"
      exit 1
    fi

    #Run linter for generated code
    echo -e "\e[32m[$(date -u)] LOG: [$(ResourceProvider)]: RUN TFLinter"
    bash ./scripts/bash/tflinter.sh 1>>$(TASK_KEY).log 2>&1
    if [ "$?" != "0" ]; then
      echo -e "\e[31m[$(date -u)] ERROR: [$(ResourceProvider)]: RUN TFLinter failed"
      az login --service-principal -u $(SERVICE_PRINCIPE_ID) -p $(SERVICE_PRINCIPE_SECRET) --tenant $(SERVICE_PRINCIPE_TENANT)
      az storage blob upload -c $(STORAGE_ACCOUNT_CONTAINER) -f $(Pipeline.Workspace)/s/$(TASK_KEY).log -n log/$(CodeGenerationName)-$(Build.BuildId)-build.log --subscription $(SERVICE_PRINCIPE_SUBSCRIPTION) --account-name=$(STORAGE_ACCOUNT)
      echo "##vso[task.setvariable variable=Task_Result]failure"
      exit 1
    fi

    # submit to repo
    cd $(Pipeline.Workspace)/s/go/src/github.com/terraform-providers/terraform-provider-azurerm
    git config credential.helper store; git config --global user.email "sdkautomationpipeline@outlook.com";git config --global user.name "AzureSDKPipelineBot"
    git checkout -b $(WORKBRANCH); git branch; git add -A; git commit -m "autogenerated"; git push origin $(WORKBRANCH)
  displayName: "build"
  name: "buildstep"
  condition: eq(variables['TARGET'], 'terraform')
