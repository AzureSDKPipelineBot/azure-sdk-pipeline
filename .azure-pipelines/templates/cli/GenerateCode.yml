steps:
- template: ../PrepareSDKCodeEnv.yml
- bash: |
    echo "$README_FILE"
    pwd
    ls -l
    sdktarget=$(TARGET)

    if [ "$sdktarget" == "clicore" ] || [ "$sdktarget" == "cliextension" ]; then
      echo 'workonCLI'
      sudo npm install -g depthcoverage --unsafe-perm=true --allow-root
      sudo npm install -g autorest-autoconfig
      depthcoverage --token=$(PIPELINE_TOKEN) --org=$(PIPELINE_ORG) --repo=$(PIPELINE_REPO) --operation=read --PRNumber=$(System.PullRequest.PullRequestNumber)
      ls -l
      FILE=$(Pipeline.Workspace)/s/specification/$(ResourceProvider)/resource-manager/readme.az.md
      if [ -f "$FILE" ]; then
        echo "$FILE exists."
        cp "$FILE" $(Pipeline.Workspace)/s/azure-rest-api-specs/specification/$(ResourceProvider)/resource-manager/readme.az.md
      fi

      if [ "$sdktarget" == "clicore" ]; then
       autorest --version=3.0.6271 --use=autorest-autoconfig@latest --target-mode=core ./azure-rest-api-specs/specification/$(ResourceProvider)/resource-manager/readme.md --resource-file=./$(RESOURCE_MAP_FILE)
      else
        # cli-extension
        autorest --version=3.0.6271 --use=autorest-autoconfig@latest ./azure-rest-api-specs/specification/$(ResourceProvider)/resource-manager/readme.md --resource-file=./$(RESOURCE_MAP_FILE) --package-$(ResourceProvider)
      fi
    fi
    
    if [ "$?" != "0" ]; then
      echo "failed to generate readme config file"
      echo "##vso[task.setvariable variable=Task_Result]failure"
    else
      echo "readme config file generated"
      cd ./azure-rest-api-specs
      echo "https://$(PIPELINE_USER):$(PIPELINE_TOKEN)@github.com" > ~/.git-credentials
      git config credential.helper store ; git config --global user.email "chunyu@microsoft.com";git config --global user.name "chunyu3"
      git branch; git pull origin $(WORKBRANCH); git add -A; git commit -m "autogenerated"; git push origin $(WORKBRANCH)
    fi
  displayName: 'Generate or update configuration file'
- bash: |
    mkdir -p $(Pipeline.Workspace)/sdk/sdkvariables
    
    # PACKAGE_NAME=`cat $(Pipeline.Workspace)/s/azure-rest-api-specs/specification/$(ResourceProvider)/resource-manager/readme.az.md | grep "extensions"| awk -F':' '{print $2}' | tr -d '[[:space:]]'`
    # af="azure-cli/src/azure-cli/azure/cli/command_modules/$PACKAGE_NAME azure-cli/src/azure-cli/requirements*.txt azure-cli/doc/sphinx/azhelpgen/doc_source_map.json azure-rest-api-specs/specification/$(ResourceProvider)/resource-manager/readme.az.md"
    # echo "PACKAGE_NAME:$PACKAGE_NAME"
    # echo "##vso[task.setvariable variable=Package]$PACKAGE_NAME"
    # echo "$PACKAGE_NAME" > $(Pipeline.Workspace)/sdk/sdkvariables/Package

    # echo "##vso[task.setvariable variable=Artifact]$af"
    # echo "$af" > $(Pipeline.Workspace)/sdk/sdkvariables/Artifact
  displayName: 'set sdk variable'
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Pipeline.Workspace)/sdk'
    artifact: 'sdkvariables'
    publishLocation: 'pipeline'
- bash: |
    set -x
    echo $pwd
    sdktarget=$(TARGET)
    codefolder="";

    if [ "$sdktarget" == "clicore" ]; then
      echo "start to generate cli core code"
      codefolder="./azure-cli"
      autorest --version=3.0.6271 --az --use=https://trenton.blob.core.windows.net/trenton/autorest-az-1.7.3.tgz ./azure-rest-api-specs/$(README_FILE) --azure-cli-folder=./azure-cli --target-mode=core --gen-cmdlet-test 1>$(TASK_KEY).log 2>&1
    fi

    if [ "$sdktarget" == "cliextension" ]; then
      echo "start to generate cli extension code"
      codefolder="./azure-cli-extensions"
      autorest --version=3.0.6271 --az --use=https://trenton.blob.core.windows.net/trenton/autorest-az-1.7.3.tgz ./azure-rest-api-specs/$(README_FILE) --azure-cli-extension-folder=./azure-cli-extensions --gen-cmdlet-test 1>$(TASK_KEY).log 2>&1
    fi

    if [ "$?" != "0" ]; then
      echo -e "\e[31m[$(date -u)] ERROR: [$(ResourceProvider)]: Generate code failed"
      # upload error log
      az login --service-principal -u $(SERVICE_PRINCIPE_ID) -p $(SERVICE_PRINCIPE_SECRET) --tenant $(SERVICE_PRINCIPE_TENANT)
      az storage blob upload -c depthcoverage -f $(TASK_KEY).log -n log/$(TARGET)-$(ResourceProvider)-$(Build.BuildId)-$(TASK_KEY).log --subscription $(SERVICE_PRINCIPE_SUBSCRIPTION) --account-name=depthcoverage
      echo "##vso[task.setvariable variable=Task_Result]failure"
      exit 1
    else
      cd $codefolder
      echo "https://$(PIPELINE_USER):$(PIPELINE_TOKEN)@github.com" > ~/.git-credentials
      git config credential.helper store ; git config --global user.email "chunyu@microsoft.com";git config --global user.name "chunyu3"
      git branch; git pull origin $(WORKBRANCH); git add -A; git commit -m "autogenerated"; git push origin $(WORKBRANCH)
    fi
  displayName: 'Generate code'